"""
Intermediate Queries
6. Calculate the number of orders per month in 2018.
7. Find the average number of products per order, grouped by customer city.
8. Calculate the percentage of total revenue contributed by each product category.
9. Identify the correlation between product price and the number of times a product has been purchased.
10. Calculate the total revenue generated by each seller, and rank them by revenue.
"""

import mysql.connector
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

db = mysql.connector.connect(
    host="localhost",
    user="Kavish",
    password="Theboss@2019",
    database="e_commerce"
)

cursor = db.cursor()

print("------------------------------------------------------------------------------------------------")
query_6 = """
SELECT MONTHNAME(order_purchase_timestamp) AS Month_Number, COUNT(*) AS Order_Counts FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTH(order_purchase_timestamp)
ORDER BY order_purchase_timestamp;
"""

cursor.execute(query_6)
data = cursor.fetchall()

df = pd.DataFrame(data, columns=["Month", "Order Count"])
print(df)

plt.figure(figsize=(10, 8))
plt.bar(df["Month"], df["Order Count"])
plt.show()
print("------------------------------------------------------------------------------------------------")

query_7 = """
WITH count_per_order AS (SELECT oi.order_id, o.customer_id, COUNT(order_item_id) AS order_count
FROM order_items AS oi
INNER JOIN orders AS o
ON oi.order_id = o.order_id
GROUP BY oi.order_id, o.customer_id)

SELECT c.customer_city, ROUND(AVG(count_per_order.order_count), 2) AS avg_count_per_city
FROM count_per_order
INNER JOIN customers AS c ON
count_per_order.customer_id = c.customer_id
GROUP BY c.customer_city;
"""

cursor.execute(query_7)
data = cursor.fetchall()

df = pd.DataFrame(data, columns=["City", "Average Count"])
print(df)


print("------------------------------------------------------------------------------------------------")

query_8 = """
-- Calculate the percentage of total revenue contributed by each product category.
WITH combination AS (SELECT oi.product_id AS oip, p.payment_value AS pv
FROM orders AS o
INNER JOIN order_items AS oi
ON o.order_id = oi.order_id
INNER JOIN payments AS p ON
p.order_id = o.order_id)

SELECT pro.product_category, ROUND((SUM(combination.pv)/(SELECT SUM(payment_value) FROM payments))*100, 2) AS "%_total_revenue"
FROM products AS pro
INNER JOIN combination ON
pro.product_id = combination.oip
GROUP BY product_category;
"""

cursor.execute(query_8)
data = cursor.fetchall()
print(data)

print("------------------------------------------------------------------------------------------------")

query_9 = """
SELECT LOWER(p.product_category),
       COUNT(o.product_id),
       ROUND(AVG(o.price), 2)
FROM products AS p
JOIN order_items AS o
ON p.product_id = o.product_id
GROUP BY p.product_category;
"""

cursor.execute(query_9)
data = cursor.fetchall()

df = pd.DataFrame(data, columns=["Category", "Count", "Avg_Price"])
print(df)
print("\n\n")

print("Checking the co-relationship between the count and the average price:")
print(np.corrcoef(df["Count"], df["Avg_Price"]))
print("This signifies that there is no evident relationship between the count of the orders and the average price")

print("------------------------------------------------------------------------------------------------")



print("------------------------------------------------------------------------------------------------")

query_10 = """
SELECT *, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rankings FROM
(SELECT seller_id, ROUND(SUM(p.payment_value) - (SUM(o.price) + SUM(o.freight_value)), 2) AS Revenue
FROM order_items AS o
INNER JOIN
payments AS p ON
o.order_id = p.order_id
GROUP BY seller_id
ORDER BY Revenue DESC) AS a
LIMIT 10;
"""

cursor.execute(query_10)
data = cursor.fetchall()

df = pd.DataFrame(data, columns=["Sellers", "Revenue", "Rank"])
print(df)

plt.figure(figsize=(12, 6))  # Adjust figure size for better visibility

plt.bar(df["Sellers"], df["Revenue"], color='orange', edgecolor='black')

plt.title("Top Sellers by Revenue", fontsize=16, fontweight='bold')
plt.xlabel("Seller ID", fontsize=12)
plt.ylabel("Revenue (in currency units)", fontsize=12)

plt.xticks(rotation=45, fontsize=10, ha='right')

plt.grid(axis='y', linestyle='--', alpha=0.7)

for index, value in enumerate(df["Revenue"]):
    plt.text(index, value + 1000, f"{value:,.2f}", ha='center', fontsize=8, color='black')

plt.tight_layout()
plt.show()

print("------------------------------------------------------------------------------------------------")
